// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
use libc;
use pango;
use std;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::ptr;
use vte_sys;
use CursorBlinkMode;
use CursorShape;
use EraseBinding;
#[cfg(any(feature = "v0_50", feature = "dox"))]
use Format;
use Pty;
use PtyFlags;
#[cfg(any(feature = "v0_46", feature = "dox"))]
use Regex;
#[cfg(any(feature = "v0_52", feature = "dox"))]
use TextBlinkMode;
use WriteFlags;

glib_wrapper! {
    pub struct Terminal(Object<vte_sys::VteTerminal, vte_sys::VteTerminalClass, TerminalClass>) @extends gtk::Widget;

    match fn {
        get_type => || vte_sys::vte_terminal_get_type(),
    }
}

impl Terminal {
    pub fn new() -> Terminal {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(vte_sys::vte_terminal_new())
        }
    }
}

impl Default for Terminal {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_TERMINAL: Option<&Terminal> = None;

pub trait TerminalExt: 'static {
    #[cfg_attr(feature = "v0_50", deprecated)]
    fn copy_clipboard(&self);

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn copy_clipboard_format(&self, format: Format);

    fn copy_primary(&self);

    //#[cfg_attr(feature = "v0_46", deprecated)]
    //#[cfg(any(feature = "v0_44", feature = "dox"))]
    //fn event_check_gregex_simple(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&glib::Regex], match_flags: /*Ignored*/glib::RegexMatchFlags) -> Option<Vec<GString>>;

    fn feed(&self, data: &[u8]);

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn feed_child_binary(&self, data: &[u8]);

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn get_allow_bold(&self) -> bool;

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn get_allow_hyperlink(&self) -> bool;

    fn get_audible_bell(&self) -> bool;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_bold_is_bright(&self) -> bool;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_cell_height_scale(&self) -> f64;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_cell_width_scale(&self) -> f64;

    fn get_char_height(&self) -> libc::c_long;

    fn get_char_width(&self) -> libc::c_long;

    fn get_cjk_ambiguous_width(&self) -> i32;

    #[cfg(any(feature = "v0_54", feature = "dox"))]
    fn get_color_background_for_draw(&self) -> gdk::RGBA;

    fn get_column_count(&self) -> libc::c_long;

    fn get_current_directory_uri(&self) -> Option<GString>;

    fn get_current_file_uri(&self) -> Option<GString>;

    fn get_cursor_blink_mode(&self) -> CursorBlinkMode;

    fn get_cursor_position(&self) -> (libc::c_long, libc::c_long);

    fn get_cursor_shape(&self) -> CursorShape;

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn get_enable_bidi(&self) -> bool;

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn get_enable_shaping(&self) -> bool;

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn get_encoding(&self) -> Option<GString>;

    fn get_font(&self) -> Option<pango::FontDescription>;

    fn get_font_scale(&self) -> f64;

    //#[cfg_attr(feature = "v0_52", deprecated)]
    //fn get_geometry_hints(&self, hints: /*Ignored*/gdk::Geometry, min_rows: i32, min_columns: i32);

    fn get_has_selection(&self) -> bool;

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn get_icon_title(&self) -> Option<GString>;

    fn get_input_enabled(&self) -> bool;

    fn get_mouse_autohide(&self) -> bool;

    fn get_pty(&self) -> Option<Pty>;

    #[cfg_attr(feature = "v0_58", deprecated)]
    fn get_rewrap_on_resize(&self) -> bool;

    fn get_row_count(&self) -> libc::c_long;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scroll_on_keystroke(&self) -> bool;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scroll_on_output(&self) -> bool;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scrollback_lines(&self) -> libc::c_long;

    //fn get_text(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString>;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_text_blink_mode(&self) -> TextBlinkMode;

    //#[cfg_attr(feature = "v0_56", deprecated)]
    //fn get_text_include_trailing_spaces(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString>;

    //fn get_text_range(&self, start_row: libc::c_long, start_col: libc::c_long, end_row: libc::c_long, end_col: libc::c_long, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString>;

    fn get_window_title(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn get_word_char_exceptions(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn hyperlink_check_event(&self, event: &mut gdk::Event) -> Option<GString>;

    //#[cfg_attr(feature = "v0_46", deprecated)]
    //fn match_add_gregex(&self, gregex: /*Ignored*/&glib::Regex, gflags: /*Ignored*/glib::RegexMatchFlags) -> i32;

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn match_add_regex(&self, regex: &Regex, flags: u32) -> i32;

    #[cfg_attr(feature = "v0_46", deprecated)]
    fn match_check(&self, column: libc::c_long, row: libc::c_long) -> (Option<GString>, i32);

    fn match_check_event(&self, event: &mut gdk::Event) -> (Option<GString>, i32);

    fn match_remove(&self, tag: i32);

    fn match_remove_all(&self);

    #[cfg_attr(feature = "v0_40", deprecated)]
    fn match_set_cursor(&self, tag: i32, cursor: Option<&gdk::Cursor>);

    fn match_set_cursor_name(&self, tag: i32, cursor_name: &str);

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn match_set_cursor_type(&self, tag: i32, cursor_type: gdk::CursorType);

    fn paste_clipboard(&self);

    fn paste_primary(&self);

    fn pty_new_sync<P: IsA<gio::Cancellable>>(&self, flags: PtyFlags, cancellable: Option<&P>) -> Result<Pty, glib::Error>;

    fn reset(&self, clear_tabstops: bool, clear_history: bool);

    fn search_find_next(&self) -> bool;

    fn search_find_previous(&self) -> bool;

    //#[cfg_attr(feature = "v0_46", deprecated)]
    //fn search_get_gregex(&self) -> /*Ignored*/Option<glib::Regex>;

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn search_get_regex(&self) -> Option<Regex>;

    fn search_get_wrap_around(&self) -> bool;

    //#[cfg_attr(feature = "v0_46", deprecated)]
    //fn search_set_gregex(&self, gregex: /*Ignored*/Option<&glib::Regex>, gflags: /*Ignored*/glib::RegexMatchFlags);

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn search_set_regex(&self, regex: Option<&Regex>, flags: u32);

    fn search_set_wrap_around(&self, wrap_around: bool);

    fn select_all(&self);

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn set_allow_bold(&self, allow_bold: bool);

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn set_allow_hyperlink(&self, allow_hyperlink: bool);

    fn set_audible_bell(&self, is_audible: bool);

    fn set_backspace_binding(&self, binding: EraseBinding);

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_bold_is_bright(&self, bold_is_bright: bool);

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_cell_height_scale(&self, scale: f64);

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_cell_width_scale(&self, scale: f64);

    fn set_cjk_ambiguous_width(&self, width: i32);

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_clear_background(&self, setting: bool);

    fn set_color_background(&self, background: &gdk::RGBA);

    fn set_color_bold(&self, bold: Option<&gdk::RGBA>);

    fn set_color_cursor(&self, cursor_background: Option<&gdk::RGBA>);

    #[cfg(any(feature = "v0_44", feature = "dox"))]
    fn set_color_cursor_foreground(&self, cursor_foreground: Option<&gdk::RGBA>);

    fn set_color_foreground(&self, foreground: &gdk::RGBA);

    fn set_color_highlight(&self, highlight_background: Option<&gdk::RGBA>);

    fn set_color_highlight_foreground(&self, highlight_foreground: Option<&gdk::RGBA>);

    fn set_cursor_blink_mode(&self, mode: CursorBlinkMode);

    fn set_cursor_shape(&self, shape: CursorShape);

    fn set_default_colors(&self);

    fn set_delete_binding(&self, binding: EraseBinding);

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn set_enable_bidi(&self, enable_bidi: bool);

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn set_enable_shaping(&self, enable_shaping: bool);

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn set_encoding(&self, codeset: Option<&str>) -> Result<(), glib::Error>;

    fn set_font(&self, font_desc: Option<&pango::FontDescription>);

    fn set_font_scale(&self, scale: f64);

    #[cfg_attr(feature = "v0_52", deprecated)]
    fn set_geometry_hints_for_window<P: IsA<gtk::Window>>(&self, window: &P);

    fn set_input_enabled(&self, enabled: bool);

    fn set_mouse_autohide(&self, setting: bool);

    fn set_pty(&self, pty: Option<&Pty>);

    #[cfg_attr(feature = "v0_58", deprecated)]
    fn set_rewrap_on_resize(&self, rewrap: bool);

    fn set_scroll_on_keystroke(&self, scroll: bool);

    fn set_scroll_on_output(&self, scroll: bool);

    fn set_scrollback_lines(&self, lines: libc::c_long);

    fn set_size(&self, columns: libc::c_long, rows: libc::c_long);

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_text_blink_mode(&self, text_blink_mode: TextBlinkMode);

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn set_word_char_exceptions(&self, exceptions: &str);

    #[cfg(any(feature = "v0_48", feature = "dox"))]
    fn spawn_async<P: IsA<gio::Cancellable>>(&self, pty_flags: PtyFlags, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags_: glib::SpawnFlags, child_setup: Option<Box_<dyn Fn() + 'static>>, timeout: i32, cancellable: Option<&P>, callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>);

    #[cfg_attr(feature = "v0_48", deprecated)]
    fn spawn_sync<P: IsA<gio::Cancellable>>(&self, pty_flags: PtyFlags, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags: glib::SpawnFlags, child_setup: Option<&mut dyn (FnMut())>, cancellable: Option<&P>) -> Result<glib::Pid, glib::Error>;

    fn unselect_all(&self);

    fn write_contents_sync<P: IsA<gio::OutputStream>, Q: IsA<gio::Cancellable>>(&self, stream: &P, flags: WriteFlags, cancellable: Option<&Q>) -> Result<(), glib::Error>;

    fn get_property_backspace_binding(&self) -> EraseBinding;

    fn get_property_delete_binding(&self) -> EraseBinding;

    fn get_property_font_desc(&self) -> Option<pango::FontDescription>;

    fn set_property_font_desc(&self, font_desc: Option<&pango::FontDescription>);

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn get_property_hyperlink_hover_uri(&self) -> Option<GString>;

    fn get_property_pointer_autohide(&self) -> bool;

    fn set_property_pointer_autohide(&self, pointer_autohide: bool);

    fn get_property_scroll_on_keystroke(&self) -> bool;

    fn get_property_scroll_on_output(&self) -> bool;

    fn get_property_scrollback_lines(&self) -> u32;

    fn connect_bell<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_char_size_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_child_exited<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_commit<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_contents_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_copy_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_copy_clipboard(&self);

    fn connect_current_directory_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_current_file_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_decrease_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_deiconify_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_encoding_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_eof<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[cfg(any(feature = "v0_50", feature = "dox"))]
    //fn connect_hyperlink_hover_uri_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn connect_icon_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_iconify_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_increase_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_lower_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_maximize_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_move_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_paste_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_paste_clipboard(&self);

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_raise_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_refresh_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_resize_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_restore_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_text_deleted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_text_inserted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_text_modified<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_text_scrolled<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_window_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_60", deprecated)]
    fn connect_property_allow_bold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn connect_property_allow_hyperlink_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_audible_bell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_backspace_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_bold_is_bright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_cell_height_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_cell_width_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cjk_ambiguous_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_current_directory_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_current_file_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cursor_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cursor_shape_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_delete_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn connect_property_enable_bidi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn connect_property_enable_shaping_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn connect_property_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_font_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn connect_property_hyperlink_hover_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_54", deprecated)]
    fn connect_property_icon_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pointer_autohide_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v0_58", deprecated)]
    fn connect_property_rewrap_on_resize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scroll_on_keystroke_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scroll_on_output_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scrollback_lines_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_text_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_window_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn connect_property_word_char_exceptions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Terminal>> TerminalExt for O {
    fn copy_clipboard(&self) {
        unsafe {
            vte_sys::vte_terminal_copy_clipboard(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn copy_clipboard_format(&self, format: Format) {
        unsafe {
            vte_sys::vte_terminal_copy_clipboard_format(self.as_ref().to_glib_none().0, format.to_glib());
        }
    }

    fn copy_primary(&self) {
        unsafe {
            vte_sys::vte_terminal_copy_primary(self.as_ref().to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v0_44", feature = "dox"))]
    //fn event_check_gregex_simple(&self, event: &mut gdk::Event, regexes: /*Ignored*/&[&glib::Regex], match_flags: /*Ignored*/glib::RegexMatchFlags) -> Option<Vec<GString>> {
    //    unsafe { TODO: call vte_sys:vte_terminal_event_check_gregex_simple() }
    //}

    fn feed(&self, data: &[u8]) {
        let length = data.len() as isize;
        unsafe {
            vte_sys::vte_terminal_feed(self.as_ref().to_glib_none().0, data.to_glib_none().0, length);
        }
    }

    fn feed_child_binary(&self, data: &[u8]) {
        let length = data.len() as usize;
        unsafe {
            vte_sys::vte_terminal_feed_child_binary(self.as_ref().to_glib_none().0, data.to_glib_none().0, length);
        }
    }

    fn get_allow_bold(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_allow_bold(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn get_allow_hyperlink(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_allow_hyperlink(self.as_ref().to_glib_none().0))
        }
    }

    fn get_audible_bell(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_audible_bell(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_bold_is_bright(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_bold_is_bright(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_cell_height_scale(&self) -> f64 {
        unsafe {
            vte_sys::vte_terminal_get_cell_height_scale(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_cell_width_scale(&self) -> f64 {
        unsafe {
            vte_sys::vte_terminal_get_cell_width_scale(self.as_ref().to_glib_none().0)
        }
    }

    fn get_char_height(&self) -> libc::c_long {
        unsafe {
            vte_sys::vte_terminal_get_char_height(self.as_ref().to_glib_none().0)
        }
    }

    fn get_char_width(&self) -> libc::c_long {
        unsafe {
            vte_sys::vte_terminal_get_char_width(self.as_ref().to_glib_none().0)
        }
    }

    fn get_cjk_ambiguous_width(&self) -> i32 {
        unsafe {
            vte_sys::vte_terminal_get_cjk_ambiguous_width(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v0_54", feature = "dox"))]
    fn get_color_background_for_draw(&self) -> gdk::RGBA {
        unsafe {
            let mut color = gdk::RGBA::uninitialized();
            vte_sys::vte_terminal_get_color_background_for_draw(self.as_ref().to_glib_none().0, color.to_glib_none_mut().0);
            color
        }
    }

    fn get_column_count(&self) -> libc::c_long {
        unsafe {
            vte_sys::vte_terminal_get_column_count(self.as_ref().to_glib_none().0)
        }
    }

    fn get_current_directory_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_current_directory_uri(self.as_ref().to_glib_none().0))
        }
    }

    fn get_current_file_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_current_file_uri(self.as_ref().to_glib_none().0))
        }
    }

    fn get_cursor_blink_mode(&self) -> CursorBlinkMode {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_cursor_blink_mode(self.as_ref().to_glib_none().0))
        }
    }

    fn get_cursor_position(&self) -> (libc::c_long, libc::c_long) {
        unsafe {
            let mut column = mem::MaybeUninit::uninit();
            let mut row = mem::MaybeUninit::uninit();
            vte_sys::vte_terminal_get_cursor_position(self.as_ref().to_glib_none().0, column.as_mut_ptr(), row.as_mut_ptr());
            let column = column.assume_init();
            let row = row.assume_init();
            (column, row)
        }
    }

    fn get_cursor_shape(&self) -> CursorShape {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_cursor_shape(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn get_enable_bidi(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_enable_bidi(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn get_enable_shaping(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_enable_shaping(self.as_ref().to_glib_none().0))
        }
    }

    fn get_encoding(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_encoding(self.as_ref().to_glib_none().0))
        }
    }

    fn get_font(&self) -> Option<pango::FontDescription> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_font(self.as_ref().to_glib_none().0))
        }
    }

    fn get_font_scale(&self) -> f64 {
        unsafe {
            vte_sys::vte_terminal_get_font_scale(self.as_ref().to_glib_none().0)
        }
    }

    //fn get_geometry_hints(&self, hints: /*Ignored*/gdk::Geometry, min_rows: i32, min_columns: i32) {
    //    unsafe { TODO: call vte_sys:vte_terminal_get_geometry_hints() }
    //}

    fn get_has_selection(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_has_selection(self.as_ref().to_glib_none().0))
        }
    }

    fn get_icon_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_icon_title(self.as_ref().to_glib_none().0))
        }
    }

    fn get_input_enabled(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_input_enabled(self.as_ref().to_glib_none().0))
        }
    }

    fn get_mouse_autohide(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_mouse_autohide(self.as_ref().to_glib_none().0))
        }
    }

    fn get_pty(&self) -> Option<Pty> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_pty(self.as_ref().to_glib_none().0))
        }
    }

    fn get_rewrap_on_resize(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_rewrap_on_resize(self.as_ref().to_glib_none().0))
        }
    }

    fn get_row_count(&self) -> libc::c_long {
        unsafe {
            vte_sys::vte_terminal_get_row_count(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scroll_on_keystroke(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_scroll_on_keystroke(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scroll_on_output(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_scroll_on_output(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_scrollback_lines(&self) -> libc::c_long {
        unsafe {
            vte_sys::vte_terminal_get_scrollback_lines(self.as_ref().to_glib_none().0)
        }
    }

    //fn get_text(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString> {
    //    unsafe { TODO: call vte_sys:vte_terminal_get_text() }
    //}

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn get_text_blink_mode(&self) -> TextBlinkMode {
        unsafe {
            from_glib(vte_sys::vte_terminal_get_text_blink_mode(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_text_include_trailing_spaces(&self, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString> {
    //    unsafe { TODO: call vte_sys:vte_terminal_get_text_include_trailing_spaces() }
    //}

    //fn get_text_range(&self, start_row: libc::c_long, start_col: libc::c_long, end_row: libc::c_long, end_col: libc::c_long, is_selected: Option<&mut dyn (FnMut(&Terminal, libc::c_long, libc::c_long) -> bool)>, attributes: /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 0 }) -> Option<GString> {
    //    unsafe { TODO: call vte_sys:vte_terminal_get_text_range() }
    //}

    fn get_window_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_window_title(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn get_word_char_exceptions(&self) -> Option<GString> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_get_word_char_exceptions(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn hyperlink_check_event(&self, event: &mut gdk::Event) -> Option<GString> {
        unsafe {
            from_glib_full(vte_sys::vte_terminal_hyperlink_check_event(self.as_ref().to_glib_none().0, event.to_glib_none_mut().0))
        }
    }

    //fn match_add_gregex(&self, gregex: /*Ignored*/&glib::Regex, gflags: /*Ignored*/glib::RegexMatchFlags) -> i32 {
    //    unsafe { TODO: call vte_sys:vte_terminal_match_add_gregex() }
    //}

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn match_add_regex(&self, regex: &Regex, flags: u32) -> i32 {
        unsafe {
            vte_sys::vte_terminal_match_add_regex(self.as_ref().to_glib_none().0, regex.to_glib_none().0, flags)
        }
    }

    fn match_check(&self, column: libc::c_long, row: libc::c_long) -> (Option<GString>, i32) {
        unsafe {
            let mut tag = mem::MaybeUninit::uninit();
            let ret = from_glib_full(vte_sys::vte_terminal_match_check(self.as_ref().to_glib_none().0, column, row, tag.as_mut_ptr()));
            let tag = tag.assume_init();
            (ret, tag)
        }
    }

    fn match_check_event(&self, event: &mut gdk::Event) -> (Option<GString>, i32) {
        unsafe {
            let mut tag = mem::MaybeUninit::uninit();
            let ret = from_glib_full(vte_sys::vte_terminal_match_check_event(self.as_ref().to_glib_none().0, event.to_glib_none_mut().0, tag.as_mut_ptr()));
            let tag = tag.assume_init();
            (ret, tag)
        }
    }

    fn match_remove(&self, tag: i32) {
        unsafe {
            vte_sys::vte_terminal_match_remove(self.as_ref().to_glib_none().0, tag);
        }
    }

    fn match_remove_all(&self) {
        unsafe {
            vte_sys::vte_terminal_match_remove_all(self.as_ref().to_glib_none().0);
        }
    }

    fn match_set_cursor(&self, tag: i32, cursor: Option<&gdk::Cursor>) {
        unsafe {
            vte_sys::vte_terminal_match_set_cursor(self.as_ref().to_glib_none().0, tag, cursor.to_glib_none().0);
        }
    }

    fn match_set_cursor_name(&self, tag: i32, cursor_name: &str) {
        unsafe {
            vte_sys::vte_terminal_match_set_cursor_name(self.as_ref().to_glib_none().0, tag, cursor_name.to_glib_none().0);
        }
    }

    fn match_set_cursor_type(&self, tag: i32, cursor_type: gdk::CursorType) {
        unsafe {
            vte_sys::vte_terminal_match_set_cursor_type(self.as_ref().to_glib_none().0, tag, cursor_type.to_glib());
        }
    }

    fn paste_clipboard(&self) {
        unsafe {
            vte_sys::vte_terminal_paste_clipboard(self.as_ref().to_glib_none().0);
        }
    }

    fn paste_primary(&self) {
        unsafe {
            vte_sys::vte_terminal_paste_primary(self.as_ref().to_glib_none().0);
        }
    }

    fn pty_new_sync<P: IsA<gio::Cancellable>>(&self, flags: PtyFlags, cancellable: Option<&P>) -> Result<Pty, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = vte_sys::vte_terminal_pty_new_sync(self.as_ref().to_glib_none().0, flags.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn reset(&self, clear_tabstops: bool, clear_history: bool) {
        unsafe {
            vte_sys::vte_terminal_reset(self.as_ref().to_glib_none().0, clear_tabstops.to_glib(), clear_history.to_glib());
        }
    }

    fn search_find_next(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_search_find_next(self.as_ref().to_glib_none().0))
        }
    }

    fn search_find_previous(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_search_find_previous(self.as_ref().to_glib_none().0))
        }
    }

    //fn search_get_gregex(&self) -> /*Ignored*/Option<glib::Regex> {
    //    unsafe { TODO: call vte_sys:vte_terminal_search_get_gregex() }
    //}

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn search_get_regex(&self) -> Option<Regex> {
        unsafe {
            from_glib_none(vte_sys::vte_terminal_search_get_regex(self.as_ref().to_glib_none().0))
        }
    }

    fn search_get_wrap_around(&self) -> bool {
        unsafe {
            from_glib(vte_sys::vte_terminal_search_get_wrap_around(self.as_ref().to_glib_none().0))
        }
    }

    //fn search_set_gregex(&self, gregex: /*Ignored*/Option<&glib::Regex>, gflags: /*Ignored*/glib::RegexMatchFlags) {
    //    unsafe { TODO: call vte_sys:vte_terminal_search_set_gregex() }
    //}

    #[cfg(any(feature = "v0_46", feature = "dox"))]
    fn search_set_regex(&self, regex: Option<&Regex>, flags: u32) {
        unsafe {
            vte_sys::vte_terminal_search_set_regex(self.as_ref().to_glib_none().0, regex.to_glib_none().0, flags);
        }
    }

    fn search_set_wrap_around(&self, wrap_around: bool) {
        unsafe {
            vte_sys::vte_terminal_search_set_wrap_around(self.as_ref().to_glib_none().0, wrap_around.to_glib());
        }
    }

    fn select_all(&self) {
        unsafe {
            vte_sys::vte_terminal_select_all(self.as_ref().to_glib_none().0);
        }
    }

    fn set_allow_bold(&self, allow_bold: bool) {
        unsafe {
            vte_sys::vte_terminal_set_allow_bold(self.as_ref().to_glib_none().0, allow_bold.to_glib());
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn set_allow_hyperlink(&self, allow_hyperlink: bool) {
        unsafe {
            vte_sys::vte_terminal_set_allow_hyperlink(self.as_ref().to_glib_none().0, allow_hyperlink.to_glib());
        }
    }

    fn set_audible_bell(&self, is_audible: bool) {
        unsafe {
            vte_sys::vte_terminal_set_audible_bell(self.as_ref().to_glib_none().0, is_audible.to_glib());
        }
    }

    fn set_backspace_binding(&self, binding: EraseBinding) {
        unsafe {
            vte_sys::vte_terminal_set_backspace_binding(self.as_ref().to_glib_none().0, binding.to_glib());
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_bold_is_bright(&self, bold_is_bright: bool) {
        unsafe {
            vte_sys::vte_terminal_set_bold_is_bright(self.as_ref().to_glib_none().0, bold_is_bright.to_glib());
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_cell_height_scale(&self, scale: f64) {
        unsafe {
            vte_sys::vte_terminal_set_cell_height_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_cell_width_scale(&self, scale: f64) {
        unsafe {
            vte_sys::vte_terminal_set_cell_width_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_cjk_ambiguous_width(&self, width: i32) {
        unsafe {
            vte_sys::vte_terminal_set_cjk_ambiguous_width(self.as_ref().to_glib_none().0, width);
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_clear_background(&self, setting: bool) {
        unsafe {
            vte_sys::vte_terminal_set_clear_background(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_color_background(&self, background: &gdk::RGBA) {
        unsafe {
            vte_sys::vte_terminal_set_color_background(self.as_ref().to_glib_none().0, background.to_glib_none().0);
        }
    }

    fn set_color_bold(&self, bold: Option<&gdk::RGBA>) {
        unsafe {
            vte_sys::vte_terminal_set_color_bold(self.as_ref().to_glib_none().0, bold.to_glib_none().0);
        }
    }

    fn set_color_cursor(&self, cursor_background: Option<&gdk::RGBA>) {
        unsafe {
            vte_sys::vte_terminal_set_color_cursor(self.as_ref().to_glib_none().0, cursor_background.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_44", feature = "dox"))]
    fn set_color_cursor_foreground(&self, cursor_foreground: Option<&gdk::RGBA>) {
        unsafe {
            vte_sys::vte_terminal_set_color_cursor_foreground(self.as_ref().to_glib_none().0, cursor_foreground.to_glib_none().0);
        }
    }

    fn set_color_foreground(&self, foreground: &gdk::RGBA) {
        unsafe {
            vte_sys::vte_terminal_set_color_foreground(self.as_ref().to_glib_none().0, foreground.to_glib_none().0);
        }
    }

    fn set_color_highlight(&self, highlight_background: Option<&gdk::RGBA>) {
        unsafe {
            vte_sys::vte_terminal_set_color_highlight(self.as_ref().to_glib_none().0, highlight_background.to_glib_none().0);
        }
    }

    fn set_color_highlight_foreground(&self, highlight_foreground: Option<&gdk::RGBA>) {
        unsafe {
            vte_sys::vte_terminal_set_color_highlight_foreground(self.as_ref().to_glib_none().0, highlight_foreground.to_glib_none().0);
        }
    }

    fn set_cursor_blink_mode(&self, mode: CursorBlinkMode) {
        unsafe {
            vte_sys::vte_terminal_set_cursor_blink_mode(self.as_ref().to_glib_none().0, mode.to_glib());
        }
    }

    fn set_cursor_shape(&self, shape: CursorShape) {
        unsafe {
            vte_sys::vte_terminal_set_cursor_shape(self.as_ref().to_glib_none().0, shape.to_glib());
        }
    }

    fn set_default_colors(&self) {
        unsafe {
            vte_sys::vte_terminal_set_default_colors(self.as_ref().to_glib_none().0);
        }
    }

    fn set_delete_binding(&self, binding: EraseBinding) {
        unsafe {
            vte_sys::vte_terminal_set_delete_binding(self.as_ref().to_glib_none().0, binding.to_glib());
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn set_enable_bidi(&self, enable_bidi: bool) {
        unsafe {
            vte_sys::vte_terminal_set_enable_bidi(self.as_ref().to_glib_none().0, enable_bidi.to_glib());
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn set_enable_shaping(&self, enable_shaping: bool) {
        unsafe {
            vte_sys::vte_terminal_set_enable_shaping(self.as_ref().to_glib_none().0, enable_shaping.to_glib());
        }
    }

    fn set_encoding(&self, codeset: Option<&str>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_terminal_set_encoding(self.as_ref().to_glib_none().0, codeset.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_font(&self, font_desc: Option<&pango::FontDescription>) {
        unsafe {
            vte_sys::vte_terminal_set_font(self.as_ref().to_glib_none().0, font_desc.to_glib_none().0);
        }
    }

    fn set_font_scale(&self, scale: f64) {
        unsafe {
            vte_sys::vte_terminal_set_font_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_geometry_hints_for_window<P: IsA<gtk::Window>>(&self, window: &P) {
        unsafe {
            vte_sys::vte_terminal_set_geometry_hints_for_window(self.as_ref().to_glib_none().0, window.as_ref().to_glib_none().0);
        }
    }

    fn set_input_enabled(&self, enabled: bool) {
        unsafe {
            vte_sys::vte_terminal_set_input_enabled(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_mouse_autohide(&self, setting: bool) {
        unsafe {
            vte_sys::vte_terminal_set_mouse_autohide(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_pty(&self, pty: Option<&Pty>) {
        unsafe {
            vte_sys::vte_terminal_set_pty(self.as_ref().to_glib_none().0, pty.to_glib_none().0);
        }
    }

    fn set_rewrap_on_resize(&self, rewrap: bool) {
        unsafe {
            vte_sys::vte_terminal_set_rewrap_on_resize(self.as_ref().to_glib_none().0, rewrap.to_glib());
        }
    }

    fn set_scroll_on_keystroke(&self, scroll: bool) {
        unsafe {
            vte_sys::vte_terminal_set_scroll_on_keystroke(self.as_ref().to_glib_none().0, scroll.to_glib());
        }
    }

    fn set_scroll_on_output(&self, scroll: bool) {
        unsafe {
            vte_sys::vte_terminal_set_scroll_on_output(self.as_ref().to_glib_none().0, scroll.to_glib());
        }
    }

    fn set_scrollback_lines(&self, lines: libc::c_long) {
        unsafe {
            vte_sys::vte_terminal_set_scrollback_lines(self.as_ref().to_glib_none().0, lines);
        }
    }

    fn set_size(&self, columns: libc::c_long, rows: libc::c_long) {
        unsafe {
            vte_sys::vte_terminal_set_size(self.as_ref().to_glib_none().0, columns, rows);
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn set_text_blink_mode(&self, text_blink_mode: TextBlinkMode) {
        unsafe {
            vte_sys::vte_terminal_set_text_blink_mode(self.as_ref().to_glib_none().0, text_blink_mode.to_glib());
        }
    }

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn set_word_char_exceptions(&self, exceptions: &str) {
        unsafe {
            vte_sys::vte_terminal_set_word_char_exceptions(self.as_ref().to_glib_none().0, exceptions.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_48", feature = "dox"))]
    fn spawn_async<P: IsA<gio::Cancellable>>(&self, pty_flags: PtyFlags, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags_: glib::SpawnFlags, child_setup: Option<Box_<dyn Fn() + 'static>>, timeout: i32, cancellable: Option<&P>, callback: Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>) {
        let child_setup_data: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::new(child_setup);
        unsafe extern "C" fn child_setup_func<P: IsA<gio::Cancellable>>(user_data: glib_sys::gpointer) {
            let callback: &Option<Box_<dyn Fn() + 'static>> = &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback()
            } else {
                panic!("cannot get closure...")
            };
        }
        let child_setup = if child_setup_data.is_some() { Some(child_setup_func::<P> as _) } else { None };
        let callback_data: Box_<Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>> = Box_::new(callback);
        unsafe extern "C" fn callback_func<P: IsA<gio::Cancellable>>(terminal: *mut vte_sys::VteTerminal, pid: glib_sys::GPid, error: *mut glib_sys::GError, user_data: glib_sys::gpointer) {
            let terminal = from_glib_borrow(terminal);
            let pid = from_glib(pid);
            let error = from_glib_borrow(error);
            let callback: Box_<Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>> = Box_::from_raw(user_data as *mut _);
            let callback = (*callback).expect("cannot get closure...");
            callback(&terminal, pid, &error)
        }
        let callback = if callback_data.is_some() { Some(callback_func::<P> as _) } else { None };
        unsafe extern "C" fn child_setup_data_destroy_func<P: IsA<gio::Cancellable>>(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn() + 'static>>> = Box_::from_raw(data as *mut _);
        }
        let destroy_call8 = Some(child_setup_data_destroy_func::<P> as _);
        let super_callback0: Box_<Option<Box_<dyn Fn() + 'static>>> = child_setup_data;
        let super_callback1: Box_<Option<Box_<dyn FnOnce(&Terminal, glib::Pid, &glib::Error) + 'static>>> = callback_data;
        unsafe {
            vte_sys::vte_terminal_spawn_async(self.as_ref().to_glib_none().0, pty_flags.to_glib(), working_directory.to_glib_none().0, argv.to_glib_none().0, envv.to_glib_none().0, spawn_flags_.to_glib(), child_setup, Box_::into_raw(super_callback0) as *mut _, destroy_call8, timeout, cancellable.map(|p| p.as_ref()).to_glib_none().0, callback, Box_::into_raw(super_callback1) as *mut _);
        }
    }

    fn spawn_sync<P: IsA<gio::Cancellable>>(&self, pty_flags: PtyFlags, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags: glib::SpawnFlags, child_setup: Option<&mut dyn (FnMut())>, cancellable: Option<&P>) -> Result<glib::Pid, glib::Error> {
        let child_setup_data: Option<&mut dyn (FnMut())> = child_setup;
        unsafe extern "C" fn child_setup_func<P: IsA<gio::Cancellable>>(user_data: glib_sys::gpointer) {
            let callback: *mut Option<&mut dyn (FnMut())> = user_data as *const _ as usize as *mut Option<&mut dyn (FnMut())>;
            if let Some(ref mut callback) = *callback {
                callback()
            } else {
                panic!("cannot get closure...")
            };
        }
        let child_setup = if child_setup_data.is_some() { Some(child_setup_func::<P> as _) } else { None };
        let super_callback0: &Option<&mut dyn (FnMut())> = &child_setup_data;
        unsafe {
            let mut child_pid = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_terminal_spawn_sync(self.as_ref().to_glib_none().0, pty_flags.to_glib(), working_directory.to_glib_none().0, argv.to_glib_none().0, envv.to_glib_none().0, spawn_flags.to_glib(), child_setup, super_callback0 as *const _ as usize as *mut _, child_pid.as_mut_ptr(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            let child_pid = from_glib(child_pid.assume_init());
            if error.is_null() { Ok(child_pid) } else { Err(from_glib_full(error)) }
        }
    }

    fn unselect_all(&self) {
        unsafe {
            vte_sys::vte_terminal_unselect_all(self.as_ref().to_glib_none().0);
        }
    }

    fn write_contents_sync<P: IsA<gio::OutputStream>, Q: IsA<gio::Cancellable>>(&self, stream: &P, flags: WriteFlags, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_terminal_write_contents_sync(self.as_ref().to_glib_none().0, stream.as_ref().to_glib_none().0, flags.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_backspace_binding(&self) -> EraseBinding {
        unsafe {
            let mut value = Value::from_type(<EraseBinding as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"backspace-binding\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `backspace-binding` getter").unwrap()
        }
    }

    fn get_property_delete_binding(&self) -> EraseBinding {
        unsafe {
            let mut value = Value::from_type(<EraseBinding as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"delete-binding\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `delete-binding` getter").unwrap()
        }
    }

    fn get_property_font_desc(&self) -> Option<pango::FontDescription> {
        unsafe {
            let mut value = Value::from_type(<pango::FontDescription as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"font-desc\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `font-desc` getter")
        }
    }

    fn set_property_font_desc(&self, font_desc: Option<&pango::FontDescription>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"font-desc\0".as_ptr() as *const _, Value::from(font_desc).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn get_property_hyperlink_hover_uri(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hyperlink-hover-uri\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `hyperlink-hover-uri` getter")
        }
    }

    fn get_property_pointer_autohide(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"pointer-autohide\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `pointer-autohide` getter").unwrap()
        }
    }

    fn set_property_pointer_autohide(&self, pointer_autohide: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"pointer-autohide\0".as_ptr() as *const _, Value::from(&pointer_autohide).to_glib_none().0);
        }
    }

    fn get_property_scroll_on_keystroke(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"scroll-on-keystroke\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `scroll-on-keystroke` getter").unwrap()
        }
    }

    fn get_property_scroll_on_output(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"scroll-on-output\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `scroll-on-output` getter").unwrap()
        }
    }

    fn get_property_scrollback_lines(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"scrollback-lines\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `scrollback-lines` getter").unwrap()
        }
    }

    fn connect_bell<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn bell_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"bell\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(bell_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_char_size_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn char_size_changed_trampoline<P, F: Fn(&P, u32, u32) + 'static>(this: *mut vte_sys::VteTerminal, width: libc::c_uint, height: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), width, height)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"char-size-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(char_size_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_child_exited<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn child_exited_trampoline<P, F: Fn(&P, i32) + 'static>(this: *mut vte_sys::VteTerminal, status: libc::c_int, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), status)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"child-exited\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(child_exited_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_commit<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn commit_trampoline<P, F: Fn(&P, &str, u32) + 'static>(this: *mut vte_sys::VteTerminal, text: *mut libc::c_char, size: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), &GString::from_glib_borrow(text), size)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"commit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(commit_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_contents_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn contents_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"contents-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(contents_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_copy_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn copy_clipboard_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"copy-clipboard\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(copy_clipboard_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_copy_clipboard(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("copy-clipboard", &[]).unwrap() };
    }

    fn connect_current_directory_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn current_directory_uri_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"current-directory-uri-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(current_directory_uri_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_current_file_uri_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn current_file_uri_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"current-file-uri-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(current_file_uri_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_moved_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-moved\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_moved_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_decrease_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn decrease_font_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"decrease-font-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(decrease_font_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_deiconify_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn deiconify_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"deiconify-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(deiconify_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_encoding_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn encoding_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"encoding-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(encoding_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_eof<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn eof_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"eof\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(eof_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    //#[cfg(any(feature = "v0_50", feature = "dox"))]
    //fn connect_hyperlink_hover_uri_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored bbox: Gdk.Rectangle
    //}

    fn connect_icon_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn icon_title_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"icon-title-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(icon_title_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_iconify_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn iconify_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"iconify-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(iconify_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_increase_font_size<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn increase_font_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"increase-font-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(increase_font_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_lower_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn lower_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"lower-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(lower_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_maximize_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn maximize_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"maximize-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(maximize_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_move_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn move_window_trampoline<P, F: Fn(&P, u32, u32) + 'static>(this: *mut vte_sys::VteTerminal, x: libc::c_uint, y: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), x, y)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"move-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(move_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_paste_clipboard<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn paste_clipboard_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"paste-clipboard\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(paste_clipboard_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_paste_clipboard(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("paste-clipboard", &[]).unwrap() };
    }

    fn connect_raise_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn raise_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"raise-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(raise_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_refresh_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn refresh_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"refresh-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(refresh_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_resize_window<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn resize_window_trampoline<P, F: Fn(&P, u32, u32) + 'static>(this: *mut vte_sys::VteTerminal, width: libc::c_uint, height: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), width, height)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"resize-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(resize_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_restore_window<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn restore_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"restore-window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(restore_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn selection_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"selection-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(selection_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_text_deleted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_deleted_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"text-deleted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(text_deleted_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_text_inserted<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_inserted_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"text-inserted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(text_inserted_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_text_modified<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_modified_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"text-modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(text_modified_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_text_scrolled<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn text_scrolled_trampoline<P, F: Fn(&P, i32) + 'static>(this: *mut vte_sys::VteTerminal, delta: libc::c_int, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref(), delta)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"text-scrolled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(text_scrolled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_window_title_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn window_title_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"window-title-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(window_title_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_allow_bold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_bold_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-bold\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_allow_bold_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn connect_property_allow_hyperlink_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_hyperlink_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-hyperlink\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_allow_hyperlink_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_audible_bell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_audible_bell_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::audible-bell\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_audible_bell_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_backspace_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backspace_binding_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::backspace-binding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_backspace_binding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_bold_is_bright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bold_is_bright_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bold-is-bright\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bold_is_bright_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_cell_height_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_height_scale_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cell-height-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cell_height_scale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_cell_width_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_width_scale_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cell-width-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cell_width_scale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_cjk_ambiguous_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cjk_ambiguous_width_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cjk-ambiguous-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cjk_ambiguous_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_current_directory_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_directory_uri_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-directory-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_current_directory_uri_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_current_file_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_file_uri_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-file-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_current_file_uri_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_cursor_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_blink_mode_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cursor-blink-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cursor_blink_mode_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_cursor_shape_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_shape_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cursor-shape\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cursor_shape_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_delete_binding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_delete_binding_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::delete-binding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_delete_binding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn connect_property_enable_bidi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_bidi_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-bidi\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_enable_bidi_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_58", feature = "dox"))]
    fn connect_property_enable_shaping_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_shaping_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-shaping\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_enable_shaping_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_encoding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encoding_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::encoding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_encoding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_font_desc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_font_desc_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::font-desc\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_font_desc_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_font_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_font_scale_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::font-scale\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_font_scale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_50", feature = "dox"))]
    fn connect_property_hyperlink_hover_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hyperlink_hover_uri_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hyperlink-hover-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_hyperlink_hover_uri_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_icon_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_input_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_enabled_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::input-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_input_enabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_pointer_autohide_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pointer_autohide_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pointer-autohide\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pointer_autohide_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_pty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pty_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pty\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pty_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_rewrap_on_resize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rewrap_on_resize_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rewrap-on-resize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_rewrap_on_resize_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_scroll_on_keystroke_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_on_keystroke_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scroll-on-keystroke\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scroll_on_keystroke_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_scroll_on_output_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_on_output_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scroll-on-output\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scroll_on_output_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_scrollback_lines_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scrollback_lines_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scrollback-lines\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scrollback_lines_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_52", feature = "dox"))]
    fn connect_property_text_blink_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_blink_mode_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::text-blink-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_text_blink_mode_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_window_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::window-title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_window_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_40", feature = "dox"))]
    fn connect_property_word_char_exceptions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_word_char_exceptions_trampoline<P, F: Fn(&P) + 'static>(this: *mut vte_sys::VteTerminal, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Terminal>
        {
            let f: &F = &*(f as *const F);
            f(&Terminal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::word-char-exceptions\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_word_char_exceptions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Terminal {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Terminal")
    }
}
