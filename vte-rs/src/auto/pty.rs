// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use gobject_sys;
use std::fmt;
use std::mem;
use std::ptr;
use vte_sys;
use PtyFlags;

glib_wrapper! {
    pub struct Pty(Object<vte_sys::VtePty, vte_sys::VtePtyClass, PtyClass>);

    match fn {
        get_type => || vte_sys::vte_pty_get_type(),
    }
}

impl Pty {
    pub fn new_foreign_sync<P: IsA<gio::Cancellable>>(fd: i32, cancellable: Option<&P>) -> Result<Pty, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = vte_sys::vte_pty_new_foreign_sync(fd, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn new_sync<P: IsA<gio::Cancellable>>(flags: PtyFlags, cancellable: Option<&P>) -> Result<Pty, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = vte_sys::vte_pty_new_sync(flags.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn child_setup(&self) {
        unsafe {
            vte_sys::vte_pty_child_setup(self.to_glib_none().0);
        }
    }

    #[cfg_attr(feature = "v0_42", deprecated)]
    pub fn close(&self) {
        unsafe {
            vte_sys::vte_pty_close(self.to_glib_none().0);
        }
    }

    pub fn get_fd(&self) -> i32 {
        unsafe {
            vte_sys::vte_pty_get_fd(self.to_glib_none().0)
        }
    }

    pub fn get_size(&self) -> Result<(i32, i32), glib::Error> {
        unsafe {
            let mut rows = mem::MaybeUninit::uninit();
            let mut columns = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_pty_get_size(self.to_glib_none().0, rows.as_mut_ptr(), columns.as_mut_ptr(), &mut error);
            let rows = rows.assume_init();
            let columns = columns.assume_init();
            if error.is_null() { Ok((rows, columns)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_size(&self, rows: i32, columns: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_pty_set_size(self.to_glib_none().0, rows, columns, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_utf8(&self, utf8: bool) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = vte_sys::vte_pty_set_utf8(self.to_glib_none().0, utf8.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(any(feature = "v0_48", feature = "dox"))]
    //pub fn spawn_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<glib::Pid, glib::Error>) + Send + 'static>(&self, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags: glib::SpawnFlags, child_setup: Option<Box_<dyn Fn() + 'static>>, child_setup_data_destroy: Fn() + 'static, timeout: i32, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call vte_sys:vte_pty_spawn_async() }
    //}

    //
    //#[cfg(any(feature = "v0_48", feature = "dox"))]
    //pub fn spawn_async_future(&self, working_directory: Option<&str>, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags: glib::SpawnFlags, child_setup: Option<Box_<dyn Fn() + 'static>>, child_setup_data_destroy: Fn() + 'static, timeout: i32) -> Pin<Box_<dyn std::future::Future<Output = Result<, >> + 'static>> {

        //let working_directory = working_directory.map(ToOwned::to_owned);
        //let argv = argv.clone();
        //let envv = envv.map(ToOwned::to_owned);
        //let child_setup = child_setup.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    obj.spawn_async(
        //        working_directory.as_ref().map(::std::borrow::Borrow::borrow),
        //        &argv,
        //        envv.as_ref().map(::std::borrow::Borrow::borrow),
        //        spawn_flags,
        //        child_setup.as_ref().map(::std::borrow::Borrow::borrow),
        //        child_setup_data_destroy,
        //        timeout,
        //        Some(&cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );

        //    cancellable
        //}))
    //}

    pub fn get_property_flags(&self) -> PtyFlags {
        unsafe {
            let mut value = Value::from_type(<PtyFlags as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.as_ptr() as *mut gobject_sys::GObject, b"flags\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `flags` getter").unwrap()
        }
    }
}

impl fmt::Display for Pty {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Pty")
    }
}
